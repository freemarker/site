<?xml version="1.0" encoding="UTF-8"?>
<page title="Don’t allow users visiting MVC Views directly!">
  <headsection>
    <p>
      A rather dangerous security hole was discovered in Web applications
      with certain components and configuration, which can be exploited
      through FreeMarker.
    </p>
  </headsection>

  <sections>
    <section title="Which systems are affected">
      <p>Web applications using JSP Model-2 approach to implement MVC (like
      older versions of Struts and WebWorks) are POSSIBLY vulnerable if the
      templates have a publicly visitable URL (like
      http://example.com/foo.ftl). Having such visitable MVC Views, while is
      a bad practice, doesn’t make the application vulnerable in itself,
      only combined with certain runtime environment settings unrelated to
      FreeMarker. No more details will be disclosed until FreeMarker 2.3.19
      (expected at the end of February, 2012), so users have a chance to secure
      their applications (see later how). Even if your system is not
      vulnerable, if you have directly visitable templates, you should apply
      the fix described below, as similar undiscovered exploits may exist.</p>

      <p>This security problem exists regardless of FreeMarker version.
      FreeMarker 2.3.19 will have a change to block this exploit in some
      cases, but not in all cases.</p>
    </section>

    <section title="How to fix the issue">
      <p>MVC Views should only be callable by the MVC Controller, even
      regardless of this security issue. They shouldn’t have public URL-s,
      since they are internal implementation details. Indeed, most of them
      are dysfunctional without the Controller preparing the data-model.</p>
      
      <p>To fix this, add this to <code>WEB-INF/web.xml</code> before <code>&lt;/web-app></code> or
      <code>login-config</code> or <code>security-role</code> or <code>env-entry</code> or <code>ejb-ref</code>,
      whichever comes first:</p>
      
      <pre>
&lt;!--
  Prevent the visiting of MVC Views from outside the servlet container.
  RequestDispatcher.forward/include should and will still work.
  Removing this may open security holes!
--&gt;
&lt;security-constraint&gt;
  &lt;web-resource-collection&gt;
    &lt;web-resource-name&gt;FreeMarker MVC Views&lt;/web-resource-name&gt;
    &lt;url-pattern&gt;*.ftl&lt;/url-pattern&gt;
  &lt;/web-resource-collection&gt;
  &lt;auth-constraint&gt;
    &lt;!-- Nobody is allowed to visit these --&gt;
  &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
      </pre>
      
      <p>You have to replace the <code>*.ftl</code> pattern inside the <code>url-pattern</code>
      with the pattern that your FreeMarker view servlet (such as
      <code>FreemarkerServlet</code>) is mapped to.</p>
      
      <p>This requires Servlet 2.2 or later, and it always should be checked
      that visiting a template directly indeed gives an error (HTTP 403).</p>
      
      <p><i>Note: Modern Web application frameworks don’t use the request-forwarding
      approach anymore for FreeMarker views. So possibly you can remove
      the related servlet declaration altogether, without breaking the
      application. It happens that it was just left there for no good
      reason.</i></p>
      
    </section>
    
    <section title="Some question that may arise">
      <p>    
      Q: What can the attacker do?<br />
      A: Sorry, no information will be released until 2.3.19.
      </p>    

      <p>    
      Q: Why don’t you just release all the information now?<br />
      A: To give users a chance to secure their systems before that.
      </p>    

      <p>    
      Q: But now I don’t know if my system is vulnerable!<br />
      A: You should apply the "security-constraint" fix regardless.
         Maybe even where you don’t use FreeMarker.
      </p>    

      <p>    
      Q: Why don’t you release 2.3.19 as soon as possible?<br />
      A: Because a source code change would expose what the problem is,
         while it wouldn’t even give 100% protection.
      </p>    

      <p>    
      Q: Is this security issue being actively exploited now?<br />
      A: We are not aware of any incidents that use this exploit.
      </p>    
    </section>

  </sections>

</page>